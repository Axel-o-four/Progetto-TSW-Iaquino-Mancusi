DROP DATABASE IF EXISTS PIXEL_EMPORIUM;
CREATE DATABASE PIXEL_EMPORIUM;
USE PIXEL_EMPORIUM;


CREATE TABLE PRODOTTO(
	PREFISSO_ID CHAR(1),
    ID INT,
    PRIMARY KEY(PREFISSO_ID, ID),
    CONSTRAINT PREFISSO_PRODOTTO CHECK (PREFISSO_ID IN ('G', 'C', 'A'))
);

CREATE TABLE GIOCO(
	PREFISSO_ID CHAR(1) NOT NULL,
	ID INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(255) NOT NULL,
	DESCRIZIONE VARCHAR(10000) NOT NULL,
	IMMAGINE VARCHAR(255) NOT NULL,
	MARCHIO VARCHAR(255) NOT NULL,
	PREZZO DECIMAL(5,2) NOT NULL,
	ANNO_DI_RILASCIO YEAR NOT NULL,
	GENERE VARCHAR(255),
	PEGI VARCHAR(2),
	FORMATO VARCHAR(8) NOT NULL,
	CONSTRAINT FORMATO_GIOCO CHECK(FORMATO='FISICO' OR FORMATO='DIGITALE'),
	CONSTRAINT PREFISSO_ID_GIOCO CHECK (PREFISSO_ID='G')
);

DELIMITER //

CREATE TRIGGER INSERIMENTO_GIOCO
AFTER INSERT ON GIOCO
FOR EACH ROW
BEGIN
    INSERT INTO PRODOTTO (PREFISSO_ID, ID) VALUES ('G', NEW.ID);
END;
//

DELIMITER ;

DELIMITER //

CREATE TRIGGER CANCELLAZIONE_GIOCO
AFTER DELETE ON GIOCO
FOR EACH ROW
BEGIN
    DELETE FROM PRODOTTO WHERE PREFISSO_ID = 'G' AND ID = OLD.ID;
END;
//

DELIMITER ;

CREATE TABLE COMPATIBILITA_GIOCO(
	ID_GIOCO INT REFERENCES GIOCO(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	ID_CONSOLE INT REFERENCES CONSOLE(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(ID_GIOCO, ID_CONSOLE)
);

CREATE TABLE CONSOLE(
	PREFISSO_ID CHAR(1) NOT NULL,
	ID INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(255) NOT NULL,
	DESCRIZIONE VARCHAR(10000) NOT NULL,
	IMMAGINE VARCHAR(255) NOT NULL,
	MARCHIO VARCHAR(255) NOT NULL,
	PREZZO DECIMAL(5,2) NOT NULL,
	ANNO_DI_RILASCIO YEAR NOT NULL,
	SUPPORTI VARCHAR(13) NOT NULL,
	RETROCOMPATIBILITA BOOLEAN,
	ARCHIVIAZIONE VARCHAR(255),
	GENERAZIONE INT,
	CONSTRAINT SUPPORTO_CONSOLE CHECK(SUPPORTI='DISCHI' OR SUPPORTI='CARTUCCIA' OR SUPPORTI='SOLO DIGITALE'),
	CONSTRAINT PREFISSO_ID_CONSOLE CHECK (PREFISSO_ID='C')
);

DELIMITER //

CREATE TRIGGER INSERIMENTO_CONSOLE
AFTER INSERT ON CONSOLE
FOR EACH ROW
BEGIN
    INSERT INTO PRODOTTO (PREFISSO_ID, ID) VALUES ('C', NEW.ID);
END;
//

DELIMITER ;

DELIMITER //

CREATE TRIGGER CANCELLAZIONE_CONSOLE
AFTER DELETE ON CONSOLE
FOR EACH ROW
BEGIN
    DELETE FROM PRODOTTO WHERE PREFISSO_ID = 'C' AND ID = OLD.ID;
END;
//

DELIMITER ;

CREATE TABLE COMPATIBILITA_ACCESSORIO(
	ID_ACCESSORIO INT REFERENCES ACCESSORIO(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	ID_CONSOLE INT REFERENCES CONSOLE(ID) ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY(ID_ACCESSORIO, ID_CONSOLE)
);

CREATE TABLE ACCESSORIO(
	PREFISSO_ID CHAR(1),
	ID INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(255) NOT NULL,
	DESCRIZIONE VARCHAR(10000) NOT NULL,
	IMMAGINE VARCHAR(255) NOT NULL,
	MARCHIO VARCHAR(255) NOT NULL,
	PREZZO DECIMAL(5,2) NOT NULL,
	TIPO_ACCESSORIO VARCHAR(255) NOT NULL,
	CONSTRAINT PREFISSO_ID_ACCESSORIO CHECK (PREFISSO_ID='A')
);

DELIMITER //

CREATE TRIGGER INSERIMENTO_ACCESSORIO
AFTER INSERT ON ACCESSORIO
FOR EACH ROW
BEGIN
    INSERT INTO PRODOTTO (PREFISSO_ID, ID) VALUES ('A', NEW.ID);
END;
//

DELIMITER ;

DELIMITER //

CREATE TRIGGER CANCELLAZIONE_ACCESSORIO
AFTER DELETE ON ACCESSORIO
FOR EACH ROW
BEGIN
    DELETE FROM PRODOTTO WHERE PREFISSO_ID = 'A' AND ID = OLD.ID;
END;
//

DELIMITER ;

CREATE TABLE CARRELLO(
    QUANTITA INT NOT NULL,
    EMAIL_UTENTE VARCHAR(255) REFERENCES UTENTE(EMAIL) ON DELETE CASCADE ON UPDATE CASCADE,
    PREFISSO_ID_PRODOTTO CHAR(1),
    ID_PRODOTTO INT,
    PRIMARY KEY (EMAIL_UTENTE, PREFISSO_ID_PRODOTTO, ID_PRODOTTO),
    FOREIGN KEY (PREFISSO_ID_PRODOTTO, ID_PRODOTTO) REFERENCES PRODOTTO(PREFISSO_ID, ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE UTENTE(
    EMAIL VARCHAR(255) PRIMARY KEY,
    NOME VARCHAR(255) NOT NULL,
    COGNOME VARCHAR(255) NOT NULL,
    DATA_NASCITA DATE NOT NULL,
    GENERE CHAR(1)
);

CREATE TABLE ORDINE(
    ID INT AUTO_INCREMENT,
    EMAIL_UTENTE VARCHAR(255),
    DATA_ORDINE DATE NOT NULL,
    QUANTITA INT NOT NULL,
    IMPORTO DECIMAL(10,2) NOT NULL,
    IVA DECIMAL(3,2) NOT NULL,
    TOTALE_IVA DECIMAL(10,2) NOT NULL,
    TOTALE_FATTURA DECIMAL(10,2) NOT NULL,
    PAESE VARCHAR(255) NOT NULL,
    CITTA VARCHAR(255) NOT NULL,
    CAP VARCHAR(5) NOT NULL,
    PROVINCIA VARCHAR(2) NOT NULL,
    VIA VARCHAR(255) NOT NULL,
    NUMERO_CIVICO VARCHAR(10) NOT NULL,
    TIPO_PAGAMENTO CHAR(1) NOT NULL,
    NUMERO_CARTA CHAR(16),
    SCADENZA_CARTA DATE,
    CVV CHAR(3),
    EMAIL_PAYPAL VARCHAR(255),
    PRIMARY KEY (ID, EMAIL_UTENTE)
);

DELIMITER //

CREATE TRIGGER MANTENIMENTO_EMAIL_ORDINE
BEFORE DELETE ON UTENTE
FOR EACH ROW
BEGIN
    UPDATE ORDINE
    SET EMAIL_UTENTE = OLD.EMAIL
    WHERE EMAIL_UTENTE = OLD.EMAIL;
END;
//

DELIMITER ;

DELIMITER //

CREATE TRIGGER CAMBIO_EMAIL_ORDINE
BEFORE UPDATE ON UTENTE
FOR EACH ROW
BEGIN
    UPDATE ORDINE
    SET EMAIL_UTENTE = NEW.EMAIL
    WHERE EMAIL_UTENTE = OLD.EMAIL;
END;
//

DELIMITER ;

CREATE TABLE CONTIENE(
    ID_ORDINE INT REFERENCES ORDINE(ID),
    PREFISSO_ID_PRODOTTO CHAR(1),
    ID_PRODOTTO INT,
    PRIMARY KEY (ID_ORDINE, ID_PRODOTTO, PREFISSO_ID_PRODOTTO),
    FOREIGN KEY (PREFISSO_ID_PRODOTTO, ID_PRODOTTO) REFERENCES PRODOTTO(PREFISSO_ID, ID)
);

CREATE TABLE INDIRIZZO_FATTURAZIONE(
    ID INT PRIMARY KEY AUTO_INCREMENT,
    EMAIL_UTENTE VARCHAR(255) REFERENCES UTENTE(EMAIL) ON DELETE CASCADE ON UPDATE CASCADE,
    PAESE VARCHAR(255) NOT NULL,
    CITTA VARCHAR(255) NOT NULL,
    CAP VARCHAR(5) NOT NULL,
    PROVINCIA VARCHAR(2) NOT NULL,
    VIA VARCHAR(255) NOT NULL,
    NUMERO_CIVICO VARCHAR(10) NOT NULL
);

CREATE TABLE METODO_PAGAMENTO(
    ID INT PRIMARY KEY AUTO_INCREMENT,
    TIPO_PAGAMENTO CHAR(1) NOT NULL,
    EMAIL_UTENTE VARCHAR(255) REFERENCES UTENTE(EMAIL) ON DELETE CASCADE ON UPDATE CASCADE,
    NUMERO_CARTA CHAR(16),
    SCADENZA_CARTA DATE,
    CVV CHAR(3),
    EMAIL_PAYPAL VARCHAR(255)
);